# Generated by Django 4.0.2 on 2022-03-07 13:17

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import mptt.fields
import profiles.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('docs', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=30, unique=True, verbose_name='Название')),
                ('short_title', models.CharField(max_length=7, unique=True, verbose_name='Краткое название')),
                ('years', models.PositiveSmallIntegerField(verbose_name='Длительность обучения (лет)')),
            ],
            options={
                'verbose_name': 'Факультет',
                'verbose_name_plural': 'Факультеты',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('sex', models.BooleanField(choices=[(None, 'Не указан'), (True, 'Мужской'), (False, 'Женский')], null=True, verbose_name='Пол')),
                ('course', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Курс')),
                ('id_vk', models.PositiveBigIntegerField(blank=True, null=True, unique=True, verbose_name='ВК id')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to=profiles.models.user_avatar_path, verbose_name='Аватар')),
                ('faculty', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='profiles.faculty', verbose_name='Факультет')),
                ('favourites', models.ManyToManyField(blank=True, to='docs.Doc', verbose_name='Избранное')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('last_folder_in_bot', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bot_users', to='docs.doc', verbose_name='Находится в папке')),
                ('top_folder', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to='docs.doc', verbose_name='Доступ')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['id'], name='profiles_us_id_698433_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['faculty', 'course'], name='profiles_us_faculty_a9253b_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['id_vk'], name='profiles_us_id_vk_922b1a_idx'),
        ),
    ]
